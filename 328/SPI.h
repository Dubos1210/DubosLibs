/* SPI Library for Atmel AVR (v0.1)
 *  SPI_init();     //Инииализация SPI
 *  SPI_data(0x**); //Отправка байта 0x**. Возвращает принятые данные
 *  
 *  Не забудьте отконфигурировать выводы и настройки в строках #define и в функции SPI_config_pins
*/

#ifndef SPI
#define SPI 1

void SPI_init(void) {            //Конфигурация выводов
	DDRB |= (1<<5);                //SCK - выход
	DDRB &=~ (1<<4);               //MISO - вход
	DDRB |= (1<<3);                //MOSI - выход
	DDRB |= (1<<2);                //SS - выход
  
	SPCR = (0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(1<<SPR1)|(0<<SPR0);
	/*
		SPIE – разрешает /запрещает прерывания от модуля SPI. Если бит установлен в 1, прерывания от SPI разрешены.
		SPE – включает/выключает модуль SPI. Если бит установлен в 1, модуль SPI включен.
		DORD – определяет порядок передачи данных. Когда бит установлен в 1, содержимое регистра данных передается младшим битом вперед. Когда бит сброшен, то старшим битом вперед.
		MSTR – определяет режим работы микроконтроллера. Если бит установлен в 1, микроконтроллер работает в режиме Master (ведущий). Если бит сброшен – в режиме Slave (ведомый). Обычно микроконтроллер работает в режиме master.
		CPOL и CPHA – определяют в каком режиме работает SPI модуль. Требуемый режим работы зависит от используемого периферийного устройства.
		 Mode  |  CPOL |  CPHA
		-------|-------|-------
		Mode 0 |   0   |   0
		Mode 1 |   0   |   1
		Mode 2 |   1   |   0
		Mode 3 |   1   |   1
		SPR1 и SPR0 – определяют частоту тактового сигнала SPI модуля, то есть скорость обмена. Максимально возможная скорость обмена всегда указывается в спецификации периферийного устройства.
		    Fsck    |  SPR1 |  SPR0
		------------|-------|-------
		F_CPU/4     |   0   |   0
		F_CPU / 16  |   0   |   1
		F_CPU / 64  |   1   |   0
		F_CPU / 128 |   1   |   1
	*/
	SPSR = (0<<SPIF)|(0<<WCOL)|(0<<SPI2X);
	/*
		Флаг SPIF указывает на завершение передачи и вызывает запрос на прерывание (если прерывания разрешены)
		Флаг WCOL устанавливается в случае, когда во время передачи данных предпринимается попытка записи в регистр данных SPI
		SPI2X - удваивает скорость передачи данных
	*/
}

unsigned char SPI_byteTxRx(unsigned char data) {
	SPDR = data;
	while(!(SPSR & (1<<SPIF)));
	data = SPDR;
	
	return(data);
}

#endif
